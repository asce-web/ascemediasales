<?php

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\file\Entity\File;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Component\Utility\Html;
use Drupal\inv_builder;
/**
 * Implement hook_theme()
 */
function inv_builder_theme() {
  return array(
    'inv_builder_element' => [
      'variables' => [
        'shortcode' => '',
        'title' => '',
        'content' => '',
        'text' => '',
        'class' => '',
        'attr' => array(),
      ]
    ],
    'inv_builder_shortcode_list' => [
      'variables' => [
        'shortcodes' => array(),
      ]
    ],
    'inv_builder_tabs' => [
      'variables' => [
        'tabs' => array(),
        'class' => '',
        'fade' => '',
		'tab_style' => '',
		'id' => '',
      ],
    ],
    'inv_builder_box' => [
      'variables' => [
        'icon' => '',
        'use_text' => 0,
		'use_image' => 0,
        'icon_text' => '',
		'icon_image' =>'',
		'read_more' => '',
        'title' => '',
		'link' => '',
        'content' => '',
        'attributes' => '',
        'icon_attributes' => '',
        'class' => '',
		'box_style' => '',
      ],
    ],
    'inv_builder_skillbar' => [
      'variables' => [
        'title' => '',
        'icon' => '',
		'skillbar_style' => '',
        'percent' => '',
        'class' => '',
		'id' => '',
      ],
    ],
    'inv_builder_title' => [
      'variables' => [
        'title' => '',
		'icon' => '',
        'subtitle' => '',
        'backword' => '',
        'class' => '',
		'title_style' => '',
      ],
    ],
    'inv_builder_stats' => [
      'variables' => [
        'title' => '',
        'icon' => '',
        'number' => '',
        'duration' => '',
        'class' => '',
		'id' => '',
      ],
    ],
	'inv_builder_icon' => [
      'variables' => [
        'icon' =>  '',
        'title' => '',
        'tooltip' => '',
        'link' => '',
        'target' => '',
        'icon_attributes' => '',  
        'attributes' => '',
		'icon_style' => '',
      ],
    ],
	'inv_builder_piegraph' => [
      'variables' => [
        'title' => '',
        'piegraph_id' => '',
        'heading' => '',
        'class' => '',
        'percent' => '',
        'icon' => '',
        'icon_style' => '',
        'bar_color' => '',
        'bar_width' => '',
      ],
    ],
	'inv_builder_button' => [
      'variables' => [
        'title' => '',
        'icon' => '',
        'attributes' => '',
		'button_style' => '',
      ],
    ],
	'inv_builder_carousels' => [
      'variables' => [
        'carousel_id' => '',
        'pager' => '',
        'control' => '',
        'auto' => '',
		'thumbnail' => '',
        'carousels' => '',
      ],
    ],
    'inv_builder_accordions' => [
      'variables' => [
        'accordions' => array(),
        'class' => '',
        'type' => '',
        'wrapper_id' => '',
      ],
    ],
	'inv_builder_gmap' => [
      'variables' => [
        'height' => 400,
        'zoom' => 14,
        'custom_style' => '',
        'markers' => [],
      ],
    ],
    'custom_css' => [
      'render element' => 'element',
    ],
  );
}

function template_preprocess_inv_builder_element(&$variables) {
  $variables['attributes']['data-shortcode-id'] = $variables['shortcode'];
  $variables['haschild'] = 1;
  $sc_service = \Drupal::service('shortcode');
  if ($sc_service->isValidShortcodeTag($variables['shortcode'])) {
    $shorcode = \Drupal::service('shortcode')->getShortcodePlugin($variables['shortcode']);
    $definition = $shorcode->getPluginDefinition();
    if (isset($definition['child']) && empty($definition['child'])) {
      $variables['haschild'] = 0;
    }
  }
  if (empty($variables['attr']))
    $variables['attr'] = [];
  $variables['attributes']['class'][] = "inv-builder-".$variables['shortcode'];
  if (isset($variables['attr']['collapse']) && $variables['attr']['collapse'] == 'true') {
    $variables['attributes']['class'][] = 'collapse';
  }
  $variables['attributes']['data-attr'] = json_encode(array_merge($variables['attr'], array('html_content' => $variables['text'])));
}

function template_preprocess_inv_builder_title(&$variables) {
  $variables['attributes']['class'][] = 'inv-builder-title';
  if($variables['class']){
    $variables['attributes']['class'][] = $variables['class'];
  }
   if($variables['title_style']){
    $variables['attributes']['class'][] = $variables['title_style'];
  }
  if($variables['backword']){
    $variables['attributes']['class'][] = 'backword';
  }
  $variables['html_id'] = \Drupal\Component\Utility\Html::getUniqueId('inv-builder-title-' . REQUEST_TIME);
}

function template_preprocess_inv_builder_stats(&$variables){
  $variables['attributes']['id'] = Html::getUniqueId("inv-stats-" . REQUEST_TIME);
  $variables['attributes']['data-number'] = $variables['number'];
  $variables['attributes']['data-duration'] = $variables['duration'];
  $variables['attributes']['class'][] = $variables['class'];
  $variables['attributes']['class'][] = 'inv-stats';
}

/**
 * Implements hook_library_info_alter().
 */
function inv_builder_library_info_alter(&$libraries, $extension){
  
    if ($extension == 'inv_builder' && isset($libraries['gmap'])) {
		$config = \Drupal::service('config.factory')->getEditable('inv_builder.gmap_settings');
		$gmap_api = $config->get('gmap_api_key');
		if(empty($gmap_api)){
		  $gmap_api = 'AIzaSyBDOx3gq6MFyzf6wPblrD5RohWqs8D7Htw'; //Default key from InnovationTheme Google map key
		}
		$libraries['gmap']['js'] = [
		  '//maps.google.com/maps/api/js?key='.$gmap_api => ['type' => 'external'],
		  'assets/js/inv-gmap.js' => [],
		];
	}

	if ($extension == 'inv_builder' && isset($libraries['gmap-admin'])) {
		$config = \Drupal::service('config.factory')->getEditable('inv_builder.gmap_settings');
		$gmap_api = $config->get('gmap_api_key');
		if(empty($gmap_api)){
		  $gmap_api = 'AIzaSyBDOx3gq6MFyzf6wPblrD5RohWqs8D7Htw'; //Default key from InnovationTheme Google map key
		}
        $libraries['gmap-admin']['js']['//maps.google.com/maps/api/js?key='.$gmap_api.'&libraries=places'] = ['type' => 'external'];
    }
}

function template_preprocess_inv_builder_gmap(&$variables){
  $variables['attributes']['data-zoom'][] = $variables['zoom'];
  $variables['attributes']['data-height'][] = $variables['height'];
  $variables['attributes']['data-custom-style'][] = $variables['custom_style'];
  $variables['attributes']['class'][] = 'inv-builder-gmap';
  $variables['attributes']['id'] = Html::getUniqueId('inv-builder-gmap-' . REQUEST_TIME);
}
/**
 * Implements hook_element_info_alter().
 */
function inv_builder_element_info_alter(&$types) {
  $types['text_format']['#pre_render'][] = [\Drupal\inv_builder\InnovationBuilderFormatPrerender::class, 'inv_builder_pre_render_text_format_enhance'];
}





/**
 * Implements hook_entity_insert().
 */
function inv_builder_entity_insert(EntityInterface $entity) {
  // Only act on content entities.
  if (!($entity instanceof FieldableEntityInterface)) {
    return;
  }
  $referenced_files_by_field = _inv_builder_get_file_fids_by_field($entity);
  foreach ($referenced_files_by_field as $field => $fids) {
    _inv_builder_record_file_usage($fids, $entity);
  }
}

/**
 * Implements hook_entity_update().
 */
function inv_builder_entity_update(EntityInterface $entity) {
  // Only act on content entities.
  if (!($entity instanceof FieldableEntityInterface)) {
    return;
  }

  // On new revisions, all files are considered to be a new usage and no
  // deletion of previous file usages are necessary.
  if (!empty($entity->original) && $entity->getRevisionId() != $entity->original->getRevisionId()) {
    $referenced_files_by_field = _inv_builder_get_file_fids_by_field($entity);
    foreach ($referenced_files_by_field as $field => $fids) {
      _inv_builder_record_file_usage($fids, $entity);
    }
  }
  // On modified revisions, detect which file references have been added (and
  // record their usage) and which ones have been removed (delete their usage).
  // File references that existed both in the previous version of the revision
  // and in the new one don't need their usage to be updated.
  else {
	if ($entity != NULL && $entity->original != NULL) {
		$original_fids_by_field = _inv_builder_get_file_fids_by_field($entity->original);
		$fids_by_field = _inv_builder_get_file_fids_by_field($entity);
		// Detect file usages that should be incremented.
		foreach ($fids_by_field as $field => $fids) {
		  $added_files = array_diff($fids_by_field[$field], $original_fids_by_field[$field]);
		  _inv_builder_record_file_usage($added_files, $entity);
		}

		// Detect file usages that should be decremented.
		foreach ($original_fids_by_field as $field => $fids) {
		  $removed_files = array_diff($original_fids_by_field[$field], $fids_by_field[$field]);
		  _inv_builder_delete_file_usage($removed_files, $entity, 1);
		}
	}
  }
}


/**
 * Implements hook_entity_delete().
 */
function inv_builder_entity_delete(EntityInterface $entity) {
  // Only act on content entities.
  if (!($entity instanceof FieldableEntityInterface)) {
    return;
  }
  $referenced_files_by_field = _inv_builder_get_file_fids_by_field($entity);
  foreach ($referenced_files_by_field as $field => $fids) {
    _inv_builder_delete_file_usage($fids, $entity, 0);
  }
}


/**
 * Finds all files referenced (file:fid) by formatted text fields.
 *
 * @param EntityInterface $entity
 *   An entity whose fields to analyze.
 *
 * @return array
 *   An array of file fids.
 */
function _inv_builder_get_file_fids_by_field(EntityInterface $entity) {
  $fids = array();

  $formatted_text_fields = _inv_builder_get_formatted_text_fields($entity);
  foreach ($formatted_text_fields as $formatted_text_field) {
    $text = '';
    $field_items = $entity->get($formatted_text_field);
    foreach ($field_items as $field_item) {
      $text .= $field_item->value;
      if ($field_item->getFieldDefinition()->getType() == 'text_with_summary') {
        $text .= $field_item->summary;
      }
    }
    $fids[$formatted_text_field] = _inv_builder_parse_file_fids($text);
  }
  return $fids;
}

/**
 * Determines the formatted text fields on an entity.
 *
 * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
 *   An entity whose fields to analyze.
 *
 * @return array
 *   The names of the fields on this entity that support formatted text.
 */
function _inv_builder_get_formatted_text_fields(FieldableEntityInterface $entity) {
  $field_definitions = $entity->getFieldDefinitions();
  if (empty($field_definitions)) {
    return array();
  }

  // Only return formatted text fields.
  return array_keys(array_filter($field_definitions, function (FieldDefinitionInterface $definition) {
        return in_array($definition->getType(), array('text', 'text_long', 'text_with_summary'), TRUE);
      }));
}

/**
 * Parse an HTML snippet for any linked file with file:fid attribute values.
 *
 * @param string $text
 *   The partial (X)HTML snippet to load. Invalid markup will be corrected on
 *   import.
 *
 * @return array
 *   An array of all found fids.
 */
function _inv_builder_parse_file_fids($text) {
  preg_match_all('/[\'|\"]file:([0-9]+)[\'|\"]/', $text, $matches);
  return $matches[1];
}

/**
 * Records file usage of files referenced by formatted text fields.
 *
 * Every referenced file that does not yet have the FILE_STATUS_PERMANENT state,
 * will be given that state.
 *
 * @param array $fids
 *   An array of file fids.
 * @param EntityInterface $entity
 *   An entity whose fields to inspect for file references.
 */
function _inv_builder_record_file_usage(array $fids, EntityInterface $entity) {
  foreach ($fids as $fid) {
    if ($file = File::load($fid)) {
      if ($file->status !== FILE_STATUS_PERMANENT) {
        $file->status = FILE_STATUS_PERMANENT;
        $file->save();
      }
      \Drupal::service('file.usage')->add($file, 'inv_builder', $entity->getEntityTypeId(), $entity->id());
    }
  }
}

/**
 * Deletes file usage of files referenced by formatted text fields.
 *
 * @param array $fids
 *   An array of file entity fids.
 * @param EntityInterface $entity
 *   An entity whose fields to inspect for file references.
 * @param $count
 *   The number of references to delete. Should be 1 when deleting a single
 *   revision and 0 when deleting an entity entirely.
 *
 * @see \Drupal\file\FileUsage\FileUsageInterface::delete()
 */
function _inv_builder_delete_file_usage(array $fids, EntityInterface $entity, $count) {
  foreach ($fids as $fid) {
    if ($file = File::load($fid)) {
      \Drupal::service('file.usage')->delete($file, 'inv_builder', $entity->getEntityTypeId(), $entity->id(), $count);
    }
  }
}

/**
 * Implements hook_page_attachments_alter().
 */
function inv_builder_page_attachments_alter(array &$attachments) {
  if (\Drupal::moduleHandler()->moduleExists('inv_block_custom')) {
    $attachments['#attached']['library'][] = 'inv_block_custom/innovation_animation';
    $attachments['#attached']['library'][] = 'inv_block_custom/innovation_parallax';
  }else{
	$attachments['#attached']['library'][] = 'inv_builder/animate';  
    $attachments['#attached']['library'][] = 'inv_builder/parallax';
  }
  $attachments['#attached']['library'][] = 'inv_builder/frontend';
}

/**
 * Implements hook_theme_suggestions_HOOK() for box
 */
function inv_builder_theme_suggestions_inv_builder_box(array $variables) {
    if (isset($variables['box_style']) && $variables['box_style'] != "") {
        return array('inv_builder_box__'.$variables['box_style']);
    }
}

/**
 * Implements hook_theme_suggestions_HOOK() for button
 */
function inv_builder_theme_suggestions_inv_builder_button(array $variables) {
    if (isset($variables['button_style']) && $variables['button_style'] != "") {
        return array('inv_builder_button__'.$variables['button_style']);
    }
}

/**
 * Implements hook_theme_suggestions_HOOK() for icon
 */
function inv_builder_theme_suggestions_inv_builder_icon(array $variables) {
    if (isset($variables['icon_style']) && $variables['icon_style'] != "") {
        return array('inv_builder_icon__'.$variables['icon_style']);
    }
}

/**
 * Implements hook_theme_suggestions_HOOK() for title
 */
function inv_builder_theme_suggestions_inv_builder_title(array $variables) {
    if (isset($variables['title_style']) && $variables['title_style'] != "") {
        return array('inv_builder_title__'.$variables['title_style']);
    }
}

/**
 * Implements hook_theme_suggestions_HOOK() for skillbar
 */
function inv_builder_theme_suggestions_inv_builder_skillbar(array $variables) {
    if (isset($variables['skillbar_style']) && $variables['skillbar_style'] != "") {
        return array('inv_builder_skillbar__'.$variables['skillbar_style']);
    }
}